// / ---------- LOWEST COMMON ASENCTOR BINARY TREe------------
      
#include "bits/stdc++.h"
using namespace std;

  struct Node{
      int data;
      struct Node*left;
      struct Node*right;
      
//   CONSTRUCTOR----    
      Node(int val){
      data = val;
      left =NULL;
      right = NULL;
  }

};

// ------------------------------------------------------------?

  bool get_path(Node*root ,int key, vector<int> &path){
      if(root== NULL){
          return false;
      }
      path.push_back(root->data);
      if(root->data == key){
          return true;
      }
 if(get_path(root->left, key,path)|| get_path(root->right,key,path)){
     return true;
 }
  path.pop_back();
  return false;
  }


// ------------------------------
    int LCA(Node*root, int n1, int n2){
        vector<int>path1, path2 ;
        
if(get_path(root, n1, path1)|| get_path(root, n2, path2)){
    return -1;
}
  int pc;
  for(pc =0; pc<path1.size() && path2.size(); pc++){
      if(path1[pc] != path2[pc]){
          break;
      }
  }
   return path1[pc-1];
    }
    
 Node* LCA2(Node*root, int n2, int n1) {
     if(root == NULL){
return NULL;
     }
     if(root->data == n1 || root->data == n2){
         return root;
     }
     
     Node*left_LCA= LCA2(root->left , n2, n1);
     Node*right_LCA=LCA2(root->right,n2,n1);
     
     if(left_LCA && right_LCA){
         return root;
     }
     if(left_LCA != NULL){
        return left_LCA ;
     }
     return right_LCA;
 }
 
 
  
  
  

int main()
{
    struct Node* root= new Node(1);
    root->left = new Node(2);
    root->right= new Node(3);
    
        root->left->left = new Node(4)  ;
      root-> left->right = new Node(5);
      root-> right->left = new Node(5);
      root-> right->left->left = new Node(5);
      
      //     1
        //  / \
        // 2  3
        //   /   / \
        //  4   5   6
        //     /
        //     7
            
            int n1=7;
            int n2=6;
            
            Node* lca = LCA2(root, n1, n2);
            if(lca == NULL){
                cout<<"LCA does not exist"<<endl;
            }
            else{
                cout<<"LCA"<<lca->data<<endl;
            }
            
    return 0;
}
